import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report
from preprocessing.preprocess import kfold_data

def plot_confusion_matrix(y_true, y_pred, model_name):
    cm = confusion_matrix(y_true, y_pred, labels=["ham", "spam"])
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["ham", "spam"])
    disp.plot(cmap=plt.cm.Blues)
    plt.title(f"Confusion Matrix: {model_name}")
    plt.show()

def evaluate_models():
    splits, X, y = kfold_data("data/emails.csv", k=5)
    for fold, (train_index, test_index) in enumerate(splits):
        print(f"Fold {fold + 1}")
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]

        # Örnek: Naive Bayes model değerlendirme
        from sklearn.feature_extraction.text import TfidfVectorizer
        from sklearn.naive_bayes import MultinomialNB

        vectorizer = TfidfVectorizer()
        X_train_tfidf = vectorizer.fit_transform(X_train)
        X_test_tfidf = vectorizer.transform(X_test)

        model = MultinomialNB()
        model.fit(X_train_tfidf, y_train)
        y_pred = model.predict(X_test_tfidf)

        print(classification_report(y_test, y_pred))
        plot_confusion_matrix(y_test, y_pred, model_name="Naive Bayes")

if __name__ == "__main__":
    evaluate_models()
